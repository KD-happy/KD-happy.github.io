<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>N_m3u8DL-CLI</title>
    <link href="/posts/2022/04-27afc3662bf7d0.html"/>
    <url>/posts/2022/04-27afc3662bf7d0.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>官方<a href="https://github.com/nilaoda/N_m3u8DL-CLI">Github</a>，请自行下载</p><p><img src="/img/2022/04/16.png" alt="下载截图"></p><p>带上 <code>_with_ffmpeg_and_DimpleG</code> 后缀的包，里面包含了 <code>ffmpeg.exe</code> 和 <code>N_m3u8DL-CLI-SimpleG.exe</code></p><p><code>N_m3u8DL-CLI-SimpleG.exe</code> 就是调用 <code>N_m3u8DL-CLI_v2.9.9.exe</code>的接口，就是一个简单的界面软件</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2022/04/17.png" alt="软件界面"></div><div class="group-image-wrap"><img src="/img/2022/04/18.png" alt="命令行"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>软件推荐</category>
      
      <category>命令行工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Snipaste</title>
    <link href="/posts/2022/04-273c64cd8a093b.html"/>
    <url>/posts/2022/04-273c64cd8a093b.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这款软件可以在微软商场里面直接搜索下载。</p><p>个人感觉这是一个颜值高，易操作，功能强大的一款软件。</p><p>微软商城截图如下</p><p><img src="/img/2022/04/15.png" alt="微软商城截图"></p><p>相关设置如下</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2022/04/7.png" alt="快捷键设置"></div><div class="group-image-wrap"><img src="/img/2022/04/8.png" alt="输出设置"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>软件推荐</category>
      
      <category>好软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EarTrumpet</title>
    <link href="/posts/2022/04-275c37cfee6703.html"/>
    <url>/posts/2022/04-275c37cfee6703.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这款软件可以在微软商场里面直接搜索下载，该软件可以设置其他每个软件的各自音量。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2022/04/6.png" alt="运行图片"></div><div class="group-image-wrap"><img src="/img/2022/04/9.png" alt="搜索图片"></div></div></div><p>教程 — 将任务栏中的音量给关闭</p><ol><li>任务栏设置<br><img src="/img/2022/04/11.png" alt="任务栏设置"></li><li>打开或关闭系统图标<br><img src="/img/2022/04/12.png" alt="打开或关闭系统图标"></li><li>关闭音量<br><img src="/img/2022/04/13.png" alt="关闭音量"></li></ol>]]></content>
    
    
    <categories>
      
      <category>软件推荐</category>
      
      <category>好软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TrafficMonitor</title>
    <link href="/posts/2022/04-271ed68d5c7be6.html"/>
    <url>/posts/2022/04-271ed68d5c7be6.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Traffic Monitor是一款用于Windows平台的网速监控悬浮窗软件，可以显示当前网速、CPU及内存利用率，支持嵌入到任务栏显示，支持更换皮肤、历史流量统计等功能。</p><p>相关的图片</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/2022/04/4.jpg" alt="选项"></div><div class="group-image-wrap"><img src="/img/2022/04/5.png" alt="右击设置"></div></div></div><p>官方<a href="https://github.com/zhongyang219/TrafficMonitor">Github</a>和<a href="https://gitee.com/zhongyang219/TrafficMonitor">Gitee</a>，请自行下载。</p><p>个人推荐使用Lite版本，管理员权限给起来太麻烦了。新版本添加了插件的功能，可以添加额外的插件，但是感觉还不是太完善。</p><p>主要特性</p><ul><li>显示当前实现网络传输速率、CPU和内存占用率</li><li>如果电脑有多个网卡，支持自动和手动选择网络连接</li><li>查看网络详细信息</li><li>支持嵌入到任务栏显示</li><li>支持更换皮肤和自定义皮肤</li><li>历史流量统计</li><li>硬件信息监控</li><li>插件系统</li></ul>]]></content>
    
    
    <categories>
      
      <category>软件推荐</category>
      
      <category>好软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ContextMenuManager</title>
    <link href="/posts/2022/04-2788db6b7b8e2b.html"/>
    <url>/posts/2022/04-2788db6b7b8e2b.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>官方的<a href="https://github.com/BluePointLilac/ContextMenuManager">Github</a>，请自行下载</p><p>官方<a href="https://www.bilibili.com/video/BV1tA411K7gm">B站演示</a></p><p>主要功能</p><ul><li>启用或禁用文件、文件夹、新建、发送到、打开方式、自定义文件格式、IE浏览器、WinX等右键菜单项目</li><li>对上述场景右键菜单项目进行修改名称、修改图标、导航注册表位置、导航文件位置、永久删除等操作</li><li>对上述场景右键菜单自定义添加项目，自定义菜单命令</li></ul><p><img src="/img/2022/04/2.png" alt="演示图片"></p><p>这个软件就是修改注册表，如果被 Windows Defender 等误报为病毒，请自行添加到白名单中</p>]]></content>
    
    
    <categories>
      
      <category>软件推荐</category>
      
      <category>好软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云盘小白羊版</title>
    <link href="/posts/2022/04-279272d1e37f28.html"/>
    <url>/posts/2022/04-279272d1e37f28.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>官方的<a href="https://github.com/liupan1890/aliyunpan">Github</a>，请在里面自行下载</p><p>小白羊可以直接观看在线视频，官方网站上面看视频感觉要开VIP了</p><p><img src="/img/2022/04/1.png" alt="演示图片"></p><p>为什么要用小白羊</p><ol><li>小白羊支持同时登录多个账号管理</li><li>小白羊特有文件夹树，可以快速方便的操作</li><li>小白羊支持直接在线播放网盘里的各种格式的视频并且是高清原画，支持外挂字幕/音轨/播放速度调整，比官方的格式更多更清晰</li><li>小白羊可以显示文件夹体积，可以文件夹和文件混合排序(文件名/体积/时间)，并且文件名排序时更准确！</li><li>小白羊可以通过远程Aria2功能把文件直接下载到远程的VPS/NAS上</li><li>小白羊可以批量的对 大量文件/多层嵌套的文件夹 一键重命名</li><li>小白羊可以快速复制文件，可以直接预览视频的雪碧图，可以直接删除文件</li><li>小白羊支持数万文件夹和数万文件的管理，支持一次性列出文件夹里包含的全部文件</li><li>小白羊支持单次上传/下载 一百万 量级的文件/文件夹</li><li>小白羊仍在努力开发新功能，让大家使用起来更方便！</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件推荐</category>
      
      <category>好软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>显示电脑WiFi密码</title>
    <link href="/posts/2022/04-27934ead09f926.html"/>
    <url>/posts/2022/04-27934ead09f926.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>自己按照别人的bat，修改的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">@echo off<br>title WiFi密码查询<br>echo 开始查询密码<br>for /f &quot;tokens=2 delims=: &quot; %%i in (&#x27;netsh wlan show profiles&#x27;) do (<br>    if not &quot;%%i&quot; == &quot;WLAN&quot; (<br>        for /f &quot;tokens=3 delims= &quot; %%d in (&#x27;netsh wlan show profiles key^=clear name^=&quot;%%i&quot; ^| findstr &quot;关键内容&quot;&#x27;) do (<br>            echo %%i 密码为: 【%%d】<br>        )<br>    )<br>)<br>echo 任意键退出查询<br><span class="hljs-meta">pause&gt;</span><span class="bash">nul</span><br></code></pre></td></tr></table></figure><p>使用步骤:</p><ol><li>复制上方的代码</li><li>创建一个文件</li><li>将上方的代码复制到该文件中</li><li>改后缀名 <code>.bat</code></li></ol><p><a href="https://www.52pojie.cn/thread-1357673-1-1.html">别人的代码</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">@echo off<br>color 2f<br>mode con: cols=40 lines=15<br>title WiFi密码查询<br>echo 正在查询结果<br>for /f &quot;tokens=2* delims=:&quot; %%i in (&#x27;netsh wlan show profiles&#x27;) do (<br>    for /f &quot;tokens=* delims= &quot; %%a in (&quot;%%i&quot;) do (<br>        for /f &quot;tokens=3* delims= &quot; %%d in (&#x27;netsh wlan show profiles key^=clear name^=&quot;%%a&quot;^| findstr &quot;关键内容&quot; &#x27;) do (<br>        echo &quot;%%a&quot;密码为：【%%d】<br>        )<br>    )<br>)<br>echo 任意键退出查询<br><span class="hljs-meta">pause&gt;</span><span class="bash">nul</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">@echo off<br>color 2f<br>mode con: cols=40 lines=15<br>title WiFi密码查询<br>echo 正在查询结果<br>setlocal enabledelayedexpansion<br>for /f &quot;tokens=2* delims=:&quot; %%i in (&#x27;netsh wlan show profiles&#x27;) do (<br>    set str=%%i<br>    for /f &quot;tokens=3* delims= &quot; %%d in (&#x27;netsh wlan show profiles key^=clear name^=&quot;!str:~1!&quot;^| findstr &quot;关键内容&quot;&#x27;) do (<br>        echo &quot;!str:~1!&quot;密码为：【%%d】<br>        echo &quot;!str:~1!&quot;密码为：【%%d】&gt;&gt;WiFi.txt<br>    )<br>)<br>echo 保存在脚本所在目录的WiFi.txt文件中<br>echo 任意键退出查询<br><span class="hljs-meta">pause&gt;</span><span class="bash">nul</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>几大语言获取参数</title>
    <link href="/posts/2022/04-265f626bee90de.html"/>
    <url>/posts/2022/04-265f626bee90de.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> ** argv)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;总参数长度: %d\n&quot;</span>, argc);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;argc; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, argv[i]);<br>    &#125;<br>    <span class="hljs-keyword">int</span> a = system(<span class="hljs-string">&quot;ipconfig &gt; www.txt&quot;</span>);<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指令执行成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指令执行失败&quot;</span>);<br>    &#125;<br>    <br>    FILE *fp = fopen(<span class="hljs-string">&quot;./www.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">while</span>((ch=fgetc(fp))!=EOF)<br>        <span class="hljs-built_in">putchar</span>(ch);<br>    fclose(fp);<br>    <span class="hljs-keyword">if</span>(system(<span class="hljs-string">&quot;del www.txt&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指令执行成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指令执行失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_arguments</span>():</span><br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;--include&quot;</span>, nargs=<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;是否要包含&quot;</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br>args = parse_arguments()<br><span class="hljs-keyword">if</span> args.include != <span class="hljs-literal">None</span>: <br>    <span class="hljs-built_in">print</span>(args.include[<span class="hljs-number">0</span>][<span class="hljs-number">6</span>:])<br></code></pre></td></tr></table></figure><p>可以通过 <code>python xxx.py --help</code> 查看帮助文档</p><h1 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> yargs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;yargs&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(yargs.argv)<br>yargs.argv._.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(element)<br>&#125;);<br><br><span class="hljs-comment">// 获取node xx.js xxx 的输入</span><br><span class="hljs-built_in">console</span>.log(process.argv)<br><span class="hljs-comment">// 可以获取运行环境</span><br><span class="hljs-built_in">console</span>.log(process.env)<br></code></pre></td></tr></table></figure><ol><li>需要下载 yargs 的包，<code>npm i yargs</code></li><li>自带的方法</li></ol><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">arg</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (args.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String s : args) &#123;<br>                System.out.println(s);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>右键菜单</title>
    <link href="/posts/2022/03-1981e0a461afa0.html"/>
    <url>/posts/2022/03-1981e0a461afa0.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h1><iframe src="//player.bilibili.com/player.html?aid=852416883&bvid=BV15L4y1M7pq&cid=553523721&page=1"> </iframe><h1 id="设置文件右击"><a href="#设置文件右击" class="headerlink" title="设置文件右击"></a>设置文件右击</h1><p>HKEY_CLASSES_ROOT 路径下的 *：是全部文件  .xxx：指定文件</p><p>在想要的哪里创建就右击</p><p>不知道在什么地方设置了<br>shell_ArchivingAsAdmin  1</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts">- *<br>    - shell<br>        - Code<br><span class="hljs-symbol">        Icon:</span> <span class="hljs-string">&quot;D:\Software\VSCode\Microsoft VS Code\Code.exe&quot;</span>   右击图标<br><span class="hljs-symbol">        HasLUAShield:</span> <span class="hljs-string">&quot;&quot;</span>                                        盾牌图标<br><span class="hljs-symbol">        Position:</span> <span class="hljs-string">&quot;top/bottom&quot;</span>                                  显示位置<br><span class="hljs-symbol">        Extended:</span> <span class="hljs-string">&quot;&quot;</span>                                            仅在按住shift显示<br><span class="hljs-symbol">        OnlyInBrowserWindow:</span> <span class="hljs-string">&quot;&quot;</span>                                 仅在文件管理器中显示<br><span class="hljs-symbol">        NoWorkingDirectory:</span> <span class="hljs-string">&quot;&quot;</span>                                  不适用右键所处目录信息<br><span class="hljs-symbol">        NeverDefault:</span> <span class="hljs-string">&quot;&quot;</span>                                        从不用作左键默认执行命令<br><span class="hljs-symbol">        ShowAsDisabledIfHidden:</span> <span class="hljs-string">&quot;&quot;</span>                              被禁用时灰色显示不隐藏<br>            - command<br>            <span class="hljs-string">&quot;默认&quot;</span>: <span class="hljs-string">&quot;D:\Software\VSCode\Microsoft VS Code\Code.exe&quot;</span> <span class="hljs-string">&quot;%1&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Uri-注册表注册方法"><a href="#Uri-注册表注册方法" class="headerlink" title="Uri 注册表注册方法"></a>Uri 注册表注册方法</h1><p>在 HKEY_CLASSES_ROOT 根目录下</p><p><code>xxx://</code> 就可以打开了</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">- xxx<br><span class="hljs-built_in">URL</span> Protocol: <span class="hljs-string">&quot;&quot;</span><br>    - <span class="hljs-built_in">shell</span><br>        - <span class="hljs-built_in">open</span><br>            - <span class="hljs-keyword">command</span><br>            <span class="hljs-string">&quot;D:\xxxx&quot;</span> <span class="hljs-string">&quot;%1&quot;</span><br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>可以设置win x<br>C:\Users\25070\AppData\Local\Microsoft\Windows\WinX</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>虎牙直播宝箱加速</title>
    <link href="/posts/2022/01-09cc7d09562262.html"/>
    <url>/posts/2022/01-09cc7d09562262.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="方法1-—-开发者工具（不推荐）"><a href="#方法1-—-开发者工具（不推荐）" class="headerlink" title="方法1 — 开发者工具（不推荐）"></a>方法1 — 开发者工具（不推荐）</h1><p>相信大家 <a href="https://www.huya.com">虎牙直播</a> 都用过把，也知道虎牙直播里面有一个观看时间来获取宝箱的活动。</p><p>但是嘛要看一个小时，一个小时也可以挂在后台要他自己播放，自己去干些别的事，但是我还是不爽，所以通过相关的Javascript来快速完成。</p><ol><li>首先打开浏览器的开发者工具<br>按一下 <code>F12</code> （或者 右击-&gt;审查元素），如下图<br><img src="/img/2022/01/1.png" alt="开发者工具"></li><li><code>Ctrl + Shift + f</code> 搜索 <code>送花</code><br>搜索后就能看见如下界面<br><img src="/img/2022/01/2.png" alt="搜索结果"></li><li>点击 <code>vplayerUI.js</code></li><li>格式化代码<br><img src="/img/2022/01/3.png" alt="格式化"></li><li><code>Ctrl + f</code> 搜索 <code>600</code><br>找到如图的位置<br><img src="/img/2022/01/4.png" alt="ff"></li><li>加断点<br>在序号 51936 处右击<br><img src="/img/2022/01/5.png" alt="加断点"></li><li>点击 <code>添加条件断点</code><br>输入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">_[<span class="hljs-number">1</span>]==<span class="hljs-number">600</span>?_=[<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>]:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><img src="/img/2022/01/6.png" alt="添加条件"></li><li>刷新页面</li></ol><p>如果按照上面不成功的话，可以将判断以及更换成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">_=[<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>],<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></p><h1 id="方法2-—-油猴脚本（推荐）"><a href="#方法2-—-油猴脚本（推荐）" class="headerlink" title="方法2 — 油猴脚本（推荐）"></a>方法2 — 油猴脚本（推荐）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         虎牙快速领宝箱</span><br><span class="hljs-comment">// @namespace    http://tampermonkey.net/</span><br><span class="hljs-comment">// @version      0.1</span><br><span class="hljs-comment">// @description  try to take over the world!</span><br><span class="hljs-comment">// @author       You</span><br><span class="hljs-comment">// @match        https://www.huya.com/*</span><br><span class="hljs-comment">// @icon         http://huya.com/favicon.ico</span><br><span class="hljs-comment">// @grant        none</span><br><span class="hljs-comment">// ==/UserScript==</span><br><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-keyword">let</span> hookSetInterval=<span class="hljs-built_in">window</span>.setInterval;<br>   <span class="hljs-built_in">window</span>.setInterval=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> hookSetInterval(a,b/<span class="hljs-number">32</span>);<br>   &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>将上方的代码复制到新创建的油猴脚本中，待宝箱全部可领取后，最好把该脚本给关闭了。</p><p><a href="https://bbs.tampermonkey.net.cn/thread-176-1-1.html">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql常见命令</title>
    <link href="/posts/2021/04-2846733639165e.html"/>
    <url>/posts/2021/04-2846733639165e.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Mysql-常见命令大全"><a href="#Mysql-常见命令大全" class="headerlink" title="Mysql 常见命令大全"></a>Mysql 常见命令大全</h1><h2 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h2><p>1、创建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database db_name;<br></code></pre></td></tr></table></figure><p>2、显示所有的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show database;<br></code></pre></td></tr></table></figure><p>3、删除数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database db_name;<br></code></pre></td></tr></table></figure><p>4、连接数据库 (使用数据库)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use db_name;<br></code></pre></td></tr></table></figure><p>5、查询当前使用的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select database();<br></code></pre></td></tr></table></figure><p>6、当前数据库包含的表信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;<br></code></pre></td></tr></table></figure><p>7、创建数据表模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_name (字段名 varchar(20), 字段名 char(1));<br></code></pre></td></tr></table></figure><h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><p>1、建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_name(<br>&lt;字段1&gt; &lt;类型1&gt;,<br>[... &lt;字段n&gt; &lt;类型n&gt;]<br>);<br></code></pre></td></tr></table></figure><p>2、获取表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">describe tb_name;<br><br>desc tb_name;<br><br>show columns tb_name;<br></code></pre></td></tr></table></figure><p>3、删除表</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> tb_name;<br></code></pre></td></tr></table></figure><p>4、插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x2F;*第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：*&#x2F;<br><br>insert into tb_name values (value1,value2,value3,...);<br><br>&#x2F;*第二种形式需要指定列名及被插入的值：*&#x2F;<br><br>insert into tb_name (column1,column2,column3,...) values (value1,value2,value3,...);<br></code></pre></td></tr></table></figure><blockquote><p>默认插入</p><p>insert into Student values(2021001, 张三, 男, 20);</p><p>指定插入</p><p>insert into Student(Sno, Sname, Ssex, Sage, Sdept) values(2021001, 张三, 男, 20);</p><p>多数据插入</p><p>insert into Student values(2021001, 张三, 男, 20), (2021002, 李四, 男, 19);</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>视频播放器</title>
    <link href="/posts/2021/04-23bab09ae1b27b.html"/>
    <url>/posts/2021/04-23bab09ae1b27b.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!--<div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?cid=145147963&aid=84267566&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe></div><span style="display:none;"><script type="text/javascript" src="https://s5.cnzz.com/z_stat.php?1279352034&amp;web_id=1279352034"></script><script>var _hmt = _hmt || [];(function() {var hm = document.createElement("script");hm.src = "https://hm.baidu.com/hm.js?8f819a89d857d2dceb2cf1c7c284f16e";var s = document.getElementsByTagName("script")[0];s.parentNode.insertBefore(hm, s);})();</script></span>--><p><video controls="" playsinline="" webkit-playsinline="" src="//video.pearvideo.com/mp4/short/20170313/cont-1046789-10272979-hd.mp4#t=4,360" width="100%" height="100%" __idm_id__="1058129921"></video></p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/98f5def6-93e8-459b-83c4-56f9702e4d10.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?bvid=BV1vB4y1w7Md&high_quality=1&page=1&danmaku=0" allowfullscreen="true" frameborder="no" scrolling="no"></iframe></div><!--<video width="666" height="500" controls>  <source src="https://vd2.bdstatic.com/mda-jm38zndgehisax4v/sc/mda-jm38zndgehisax4v.mp4" type="video/mp4">  <source src="https://www.runoob.com/try/demo_source/movie.ogg" type="video/ogg">  <source src="https://www.runoob.com/try/demo_source/movie.webm" type="video/webm">您的浏览器不支持 video 标签。</video><p><video width="666" height="500" src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/98f5def6-93e8-459b-83c4-56f9702e4d10.mp4" controls="controls" playsinline="" __idm_id__="204559361"></video></p>--><!--<div style="position: relative; width: 100%; height: 0; padding-bottom:75%; "><iframe src="https://player.bilibili.com/player.html?aid=587519765&bvid=BV1vB4y1w7Md&cid=322319131&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>--><p><iframe src="https://player.bilibili.com/player.html?aid=84267566&page=1&as_wide=1&high_quality=1&danmaku=0" allowfullscreen="true" frameborder="no"scrolling="no" width="100%" height="600"></iframe></p><!--<script src="https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js"></script>-->  <!--小帅哥： https://unpkg.com/live2d-widget-model-chitose@1.0.5/assets/chitose.model.json-->  <!--萌娘：https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json-->  <!--小可爱（女）：https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json-->  <!--小可爱（男）：https://unpkg.com/live2d-widget-model-haruto@1.0.5/assets/haruto.model.json-->  <!--初音：https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json-->   <!-- 上边的不同链接显示的是不同的小人，这个可以根据需要来选择 下边的初始化部分，可以修改宽高来修改小人的大小，或者是鼠标移动到小人上的透明度，也可以修改小人在页面出现的位置。 --><!--<script>/*https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json*/L2Dwidget.init({ "model": { jsonPath:      "https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json",    "scale": 1 }, "display": { "position": "right", "width": 110, "height": 150,    "hOffset": 0, "vOffset": -20 }, "mobile": { "show": false, "scale": 0.5 },  "react": { "opacityDefault": 0.8, "opacityOnHover": 0.1 } });</script>-->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>音乐播放器</title>
    <link href="/posts/2021/04-235f694944defa.html"/>
    <url>/posts/2021/04-235f694944defa.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=6724479659&auto=0&height=430"></iframe><h1 id="插件播放"><a href="#插件播放" class="headerlink" title="插件播放"></a>插件播放</h1><h2 id="网易云特定播放"><a href="#网易云特定播放" class="headerlink" title="网易云特定播放"></a>网易云特定播放</h2>        <div id="aplayer-aHlPuqtl" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-aHlPuqtl"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "涅槃",              author: "陆怡雯",              url: "https://music.163.com/song/media/outer/url?id=1460387791.mp3",              pic: "http://p1.music.126.net/6z7a22UidY2G23_KBfJ9WQ==/109951165112519879.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="歌词播放"><a href="#歌词播放" class="headerlink" title="歌词播放"></a>歌词播放</h2><div id="aplayer-nhvtVlhz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">[00:00.000] 作词 : 冰燕 [00:01.000] 作曲 : 马海昕Aaron [00:05.44]编曲：马海昕Aaron/R7cky [00:16.34]我穿越岁月的荒漠 [00:20.03]到达了下一个路口 [00:23.28]暮色下烟火在闪烁 [00:26.23]开出最美的花朵 [00:29.84]梦见一颗星坠落 [00:32.93]划出唯美的轮廓 [00:36.17]光的每一次触摸 [00:39.04]将我从疲惫解脱 [00:42.73]狂风在大作 用力将我撵落 [00:48.49]熊熊的烈火 用炽热警告我 [00:55.37]世界尽头彻夜巡游 [00:58.30]不畏惧孤独和寂寞 [01:01.19]洗掉脆弱 化勇者魂魄 [01:21.31]利刃在划破 残存的怯懦 [01:27.76]浓雾包围我 用沉默诉说 [01:37.57]痛压迫着我 奋力去挣脱 [01:50.30]展翅高飞过 任风雨颠簸 [02:12.31]我穿越岁月的荒漠 [02:15.26]到达了下一个路口 [02:18.43]暮色下烟火在闪烁 [02:21.26]开出最美的花朵 [02:24.88]梦见一颗星坠落 [02:28.10]划出唯美的轮廓 [02:31.25]光的每一次触摸 [02:34.15]将我从疲惫解脱 [02:50.73]世界尽头彻夜巡游 [02:53.62]不畏惧孤独和寂寞 [02:56.52]洗掉脆弱 化勇者魂魄 [03:16.42]利刃在划破 残存的怯懦 [03:22.80]浓雾包围我 用沉默诉说 [03:29.43]发行：巨响文化</pre></div><script>var ap = new APlayer({element: document.getElementById("aplayer-nhvtVlhz"),narrow: false,autoplay: false,showlrc: 2,music: {title: "title",author: "author",url: "https://music.163.com/song/media/outer/url?id=1460387791.mp3",pic: "http://p1.music.126.net/6z7a22UidY2G23_KBfJ9WQ==/109951165112519879.jpg?param=130y130",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><h2 id="列表播放"><a href="#列表播放" class="headerlink" title="列表播放"></a>列表播放</h2>        <div id="aplayer-zcRssQnQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":0,"music":[{"title":"CoCo","author":"Jeff Williams","url":"https://music.163.com/song/media/outer/url?id=1460387791.mp3","pic":"http://p1.music.126.net/6z7a22UidY2G23_KBfJ9WQ==/109951165112519879.jpg?param=130y130"},{"title":"111","author":"11","url":"https://music.163.com/song/media/outer/url?id=1484556874.mp3","lrc":"/js/111.js","pic":""}]};  options.element = document.getElementById("aplayer-zcRssQnQ");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script><p><br><br></p><h1 id="另外的播放器"><a href="#另外的播放器" class="headerlink" title="另外的播放器"></a>另外的播放器</h1><h2 id="网易云特定音乐"><a href="#网易云特定音乐" class="headerlink" title="网易云特定音乐"></a>网易云特定音乐</h2><audio  controls="controls" playsinline webkit-playsinline><source src="https://music.163.com/song/media/outer/url?id=516497142.mp3"></audio><div class="post-content" itemprop="articleBody"><span id="menu_index_1" class="index-menu-anchor" data-title="中文歌曲"></span><h2>中文歌曲</h2><p><audio controls="controls" preload="auto" playsinline="" webkit-playsinline="" loop="" __idm_id__="276156417"><br><source src="https://6url.cn/zazEPh" type="audio/mpeg"><br></audio></p><span id="menu_index_2" class="index-menu-anchor" data-title="英文歌曲"></span><h2>英文歌曲</h2><p><audio controls="controls" preload="auto" playsinline="" webkit-playsinline="" loop=""><br><source src="https://6url.cn/cW8uFL" type="audio/mpeg"><br></audio></p><span id="menu_index_3" class="index-menu-anchor" data-title="小语种歌曲"></span><h2>小语种歌曲</h2><p><audio controls="controls" preload="auto" playsinline="" webkit-playsinline="" loop=""><br><source src="https://6url.cn/M34fN9" type="audio/mpeg"><br></audio></p><span id="menu_index_4" class="index-menu-anchor" data-title="纯音乐"></span><h2>纯音乐</h2><p><audio controls="controls" preload="auto" playsinline="" webkit-playsinline="" loop=""><br><source src="https://6url.cn/wApnVs" type="audio/mpeg"><br></audio></p><p><strong>刷新页面随机播放歌曲，曲库持续增加中，仅供低音质试听。</strong></p><p class="content-copyright"></p></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java 导包的使用</title>
    <link href="/posts/2021/04-22611dbdd61f7e.html"/>
    <url>/posts/2021/04-22611dbdd61f7e.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Scanner：输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">导包<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br>创建对象<br>Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>方法：<br><span class="hljs-keyword">int</span> i = sc.nextInt(); <span class="hljs-comment">//输入int类型</span><br><br>String s = sc.nestLine(); <span class="hljs-comment">//输入String类型</span><br></code></pre></td></tr></table></figure><p>Random：生成随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">导包<br><span class="hljs-keyword">import</span> java.util.Random;<br><br>创建对象<br>Random r = <span class="hljs-keyword">new</span> Random();<span class="hljs-comment">//构造</span><br><br>方法：<br><span class="hljs-keyword">int</span> i = r.Random(<span class="hljs-number">10</span>); <span class="hljs-comment">//0-9的随机数</span><br></code></pre></td></tr></table></figure><p>Arrays</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">创建对象<br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[];<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br>方法：<br>    <span class="hljs-keyword">int</span> i = arr.length; <span class="hljs-comment">//获得arr数组的长度</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">导包：<br>    <span class="hljs-keyword">import</span> java.util.Arrays;<br><br>复制数组<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] copyOf(<span class="hljs-keyword">int</span>[] original, <span class="hljs-keyword">int</span> newLength)<br>        original：数组名     newLength：新数组的长度<br>填充数组<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">    a：数组名val：要填充的数</span><br><span class="hljs-function">数组排序</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span></span><br><span class="hljs-function">    a:数组名 新数组返回到数组本身</span><br><span class="hljs-function">查找元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> key)</span></span><br><span class="hljs-function">        a：数组名key：要查找的元素</span><br></code></pre></td></tr></table></figure><p>String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">创建对象：<br>    String s = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//创建一个空的String类型</span><br>String s = <span class="hljs-keyword">new</span> String(); <span class="hljs-comment">//创建一个空的String类型</span><br>    <br><span class="hljs-keyword">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>String s = <span class="hljs-keyword">new</span> String(chs);<br><br><span class="hljs-keyword">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>String s = <span class="hljs-keyword">new</span> String(chs,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//1：是偏移量 3：字符长度</span><br><br><span class="hljs-keyword">byte</span>[] bys = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>&#125;;<br>String s - <span class="hljs-keyword">new</span> String(bys);<br><br>String s = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>方法：<br><span class="hljs-keyword">int</span> i = s.length(); <span class="hljs-comment">//获得s的长度</span><br><br><span class="hljs-keyword">char</span> ch = s.charAt(i); <span class="hljs-comment">//获得s索引值为i的值</span><br><br><span class="hljs-keyword">boolean</span> b = s.equals(s1); <span class="hljs-comment">//判断s和s1是否相同，简单的==只是判断地址值</span><br></code></pre></td></tr></table></figure><p>String Builder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">构造方法：<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>String s = <span class="hljs-string">&quot;hello&quot;</span>;<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(s);<br><br>方法：<br>    <span class="hljs-keyword">int</span> i = sb.length();<br><br>sb.append(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//在sb后面加一个hello，并且返回到对象本身</span><br>sb.append(<span class="hljs-number">10</span>); <span class="hljs-comment">//sb后面什么都可以加</span><br>sb.append(<span class="hljs-string">&quot;hello&quot;</span>).append(<span class="hljs-number">10</span>); <span class="hljs-comment">//链式编程</span><br><span class="hljs-comment">//因为返回到对象本身的性质，所以可以把前面的看做一个个的对象</span><br><br>sb.reverse(); <span class="hljs-comment">//反转sb的值</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder 转 String<br>    StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;hello&quot;</span>);<br>String s = sb.toString(); <span class="hljs-comment">//toString() 方法的使用</span><br><br>String 转 StringBuilder<br>    String s = <span class="hljs-string">&quot;hello&quot;</span>;<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(s); <span class="hljs-comment">//创建对象的时候赋值</span><br></code></pre></td></tr></table></figure><p>ArrayList 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">导包<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br>创建对象<br>    ArrayList&lt;String&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><br>方法<br>    array.add(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//在后面添加hello，要注意添加的类型和 &lt;&gt; 中间定义的类型要一致</span><br>array.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//在索引值为1的地方加一个hello，原来的元素向后移</span><br><br>array.remove.(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//去除含有hello的元素，有多个重名时只能删除最前面的一个</span><br>array.remove(<span class="hljs-number">1</span>); <span class="hljs-comment">//删除索引值为1的元素,返回值时布尔型，就是看他有没有删除成功</span><br><br>array.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//将索引值为1的元素改成hello，返回值为被修改的元素</span><br><br>array.size(); <span class="hljs-comment">// 返回值为元素的个数</span><br><br><br>    ArrayList&lt;Student&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;(); <span class="hljs-comment">//自己创建的类，也是可以用的，但是个人认为他保存的就是指向(就是指针，但是Java中没有指针)</span><br>    Student s1 = <span class="hljs-keyword">new</span> Student();<br>    Student s2 = <span class="hljs-keyword">new</span> Student();<br>    array.add(s1).add(s2);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">复制数组<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] copyOf(<span class="hljs-keyword">int</span>[] original, <span class="hljs-keyword">int</span> newLength)<br>填充数组<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">数组排序</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span></span><br><span class="hljs-function">查找元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> key)</span></span><br></code></pre></td></tr></table></figure><hr><p>我自己对API文档的感觉：</p><p>如果该类有构造方法就要先构造，即</p><p>类名 对象名 = new 类目();   //具体的看构造的方法</p><p>使用该类的方法，即</p><p>对象名.方法名();   //具体的还要看方法的介绍</p><p>没有构造方法的（方法被static修饰的）</p><p>调用该类的方法时，即</p><p>类名.方法名();</p><p>使用static 修饰的方法和变量是<strong>类变量</strong>和类方法！在jdk 将类编译完以后，java 会用类加载器将类加载进内存中！然后才可以让我们去运行，<br>类变量和类方法就是在这个时候实例化了，它的生命周期也是跟随着类，随它产生而产生，随它死亡而死亡。因此它的调用方式也与平常变量，方法不一样，普通方法是在new 一个类时才开始 出世（也就是生命周期的开始）。所以普通方法需要new 一个类后，再用这个类的实例来调用。而静态方法可以直接用 类名.方法 进行调用。（因为他在产生的时候就已经产生无须实例化类也可以调用）</p><hr>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MOOC爬虫</title>
    <link href="/posts/2021/04-227548fa7ce917.html"/>
    <url>/posts/2021/04-227548fa7ce917.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><p><strong>Response对象的属性</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP相应内容的二进制形式</td></tr></tbody></table></div><p><em>注意</em><br>r.encoding: 如果header中不存在charset，则认为编码为ISO-8859-1<br>r.text根据r.encoding显示网页内容<br>r.apparent_encoding: 根据网页内容分析出的编码方式<br>可以看作是r.encoding的备选</p><p><strong>Requests库的异常</strong></p><div class="table-container"><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒接俩捏等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>连接远程服务器超时异常</td></tr><tr><td>requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr><tr><td>requests.raise_for_status()</td><td>如果不是200，产生异常 requests.HTTPError</td></tr></tbody></table></div><p><strong>Requests库的7个重要方法</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑以下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的重要方法，对应于HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML页面提交删除请求，duiyingyuHTTP的DELETE</td></tr></tbody></table></div><p><strong>HTTP协议</strong></p><p><font color = 'red'>HTTP</font>，Hypertext Transfer Protocol，超文本传输协议<br>HTTP是一个基于“请求与响应”模式的，无状态的应用层协议<br>HTTP协议采用URL作为定位网络资源的标识，URL格式如下：</p><p><a href="http://host[:port][path">http://host[:port][path</a>]</p><p><font color='red'>host</font>: 合法的Internet主机域名或IP地址</p><p><font color='red'>port</font>: 端口号，缺省端口为80</p><p><font color='red'>path</font>: 请求资源的路径</p><p>HTTP URL的理解：<br>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源</p><p><strong>HTTP协议对资源的操作</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URL位置资源的响应消息报告，即获取该资源的头部信息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附加新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，覆盖原URL位置的资源</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table></div><p><strong>HTTP协议与Requests库</strong><br>协议方法和Requests库对应的方法功能一致</p><p>requests.request(method, url, **kwargs)</p><p>method: 请求方式<br>get、head、post、put、patch、delete、optios</p><p>**kwargs: 控制访问的参数，均为可选项（13个）</p><p><font color='red'>params</font>: 字典或字节序列，作为参数增加到url中<br>r.url: 可以查看请求连接和所带的参数</p><p><font color='red'>data</font>: 字典、字节序列或文件对象，作为Request的内容</p><p><font color='red'>json</font>: JSON格式的数据，作为Request的内容</p><p><font color='red'>headers</font>: 字典，HTTP定制头</p><p><font color='red'>cookies</font>: 字典或CookieJar，Request中的cookie</p><p><font color='red'>auth</font>: 元组，支持HTTP认证功能</p><p><font color='red'>files</font>: 字典类型，传输文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fs = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.xls&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)&#125;<br>r = requests.request(<span class="hljs-string">&#x27;POST&#x27;</span>, url, file=fs)<br></code></pre></td></tr></table></figure></p><p><font color='red'>timeout</font>: 设定超时时间，单位为秒（超时会产生一个Timeout异常）</p><p><font color='red'>proxies</font>: 字典类型，设定访问代理服务器，可以增加登录认证<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pxs = &#123;<span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&#x27;http://user:pass@10.10.10.1:1234&#x27;</span>,<br>        <span class="hljs-string">&#x27;https&#x27;</span>: <span class="hljs-string">&#x27;https://10.10.10.1:4321&#x27;</span>&#125;<br>r = requests.request(<span class="hljs-string">&#x27;GET&#x27;</span>, url, proxies=pxs)<br></code></pre></td></tr></table></figure></p><p><font color='red'>allow_redirects</font>: True/False，默认为True，<a href="https://baike.baidu.com/item/重定向">重定向</a>开关</p><p><font color='red'>stream</font>: True/False，默认为True，获取内容立即下载开关</p><p><font color='red'>verify</font>: True/False，默认为True，认证<a href="https://baike.baidu.com/item/SSL证书">SSL证书</a>开关</p><p><font color='red'>cert</font>: 本地SSL证书路径</p><h2 id="Beautiful-Soup库的使用"><a href="#Beautiful-Soup库的使用" class="headerlink" title="Beautiful Soup库的使用"></a>Beautiful Soup库的使用</h2><p>库的小测<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>url = <span class="hljs-string">&quot;http://python123.io/ws/demo.html&quot;</span><br>r = requests.get(url)<br>demo = r.text<br>soup = BeautifulSoup(demo, <span class="hljs-string">&quot;html.parser&quot;</span>) <span class="hljs-comment"># html的解析器</span><br><span class="hljs-built_in">print</span>(soup.prettify())<br></code></pre></td></tr></table></figure></p><p>Beautiful Soup库的理解<br>\<p class="title">...\</p><br>\<p>..\</p>: 标签Tag<br>p: 名称Name成对出现<br>属性域Attributes 0个或多个（来定义标签的特点的）</p><p><strong>Beautiful Soup库解析器</strong></p><div class="table-container"><table><thead><tr><th>解析器</th><th>使用方法</th><th>条件</th></tr></thead><tbody><tr><td>bs4的HTML解析器</td><td>BeautifulSoup(mk, ‘html.parser’)</td><td>安装bs4库</td></tr><tr><td>lxml的HTML解析器</td><td>BeautifulSoup(mk, ‘lxml’)</td><td>pip install lxml</td></tr><tr><td>lxml的XML解析器</td><td>BeautifulSoup(mk, ‘xml’)</td><td>pip install lxml</td></tr><tr><td>html5lib的解析器</td><td>BeautifulSoup(mk, ‘html5lib’)</td><td>pip install html5lib</td></tr></tbody></table></div><p><strong>Beautiful Soup类的基本元素</strong></p><div class="table-container"><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用<>和</>表明开头和结尾</td></tr><tr><td>Name</td><td>标签的名字，\<p>...\</p>的名字是’p’，格式：<tag>.name</td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式：<tag>.attrs</td></tr><tr><td>NavigableString</td><td>标签内非属性字符串，<>...</>中字符串，格式：<tag>.string</td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(soup.title)<br><br><span class="hljs-built_in">print</span>(soup.a.parent.name)<br><br><span class="hljs-built_in">print</span>(soup.a.attrs)<br><span class="hljs-built_in">print</span>(soup.a.attrs[<span class="hljs-string">&#x27;href&#x27;</span>])<br><br>newsoup = BeautifulSoup(<span class="hljs-string">&quot;&lt;b&gt;&lt;!--这是注释--&gt;&lt;/b&gt;&lt;p&gt;这不是注释&lt;/p&gt;&quot;</span>, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><span class="hljs-built_in">print</span>(newsoup.b.string, <span class="hljs-built_in">type</span>(newsoup.b.string))<br><span class="hljs-built_in">print</span>(newsoup.p.sting, <span class="hljs-built_in">type</span>(newsoup.p.string))<br></code></pre></td></tr></table></figure><p>bs4库的HTML内容遍历方法<br><strong>标签树的下行遍历</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.contents</td><td>子节点的列表，将<tag>所有儿子节点存入列表</td></tr><tr><td>.children</td><td>子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td></tr><tr><td>.descendants</td><td>子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table></div><p>遍历<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> soup.body.children:<br>        <span class="hljs-built_in">print</span>(child)<br><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> soup.body.descendants:<br>        <span class="hljs-built_in">print</span>(child)<br></code></pre></td></tr></table></figure></p><p><strong>标签树的上行遍历</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.parent</td><td>节点的父亲标签</td></tr><tr><td>.parents</td><td>节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table></div><p><strong>标签树的平行遍历</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td>.previous_sibling</td><td>返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td>.next_siblings</td><td>迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td>.previous_siblings</td><td>迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> soup.a.next_siblings:<br>        <span class="hljs-built_in">print</span>(sibling)<br><br><span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> soup.a.previous_siblings:<br>        <span class="hljs-built_in">print</span>(sibling)<br></code></pre></td></tr></table></figure><p>实例：提取html文件中所有a标签中的URL连接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(demo, <span class="hljs-string">&quot;html.parser&quot;</span>) <span class="hljs-comment"># html的解析器</span><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> soup.findAll(<span class="hljs-string">&#x27;a&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(link.attrs[<span class="hljs-string">&#x27;href&#x27;</span>])<br></code></pre></td></tr></table></figure></p><p><strong>基于bs4库的HTML内容查找方法</strong><br>&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs)<br>返回一个列表类型，存储查找的结果。</p><p><font color='red'>name</font>: 对标签名称的索引字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment"># 查找a标签</span><br>soup.find_all([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]) <span class="hljs-comment"># 查找a和b标签</span><br>soup.find_all(<span class="hljs-literal">True</span>) <span class="hljs-comment">#所有标签</span><br>suop.find_all(re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-comment">#查找所有以b开头的标签</span><br></code></pre></td></tr></table></figure></p><p><font color='red'>attrs</font>: 对<strong>标签属性值</strong>的索引字符串，可标注属性索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">soup.find_all(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;course&#x27;</span>)<br>soup.find_all(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;link1&#x27;</span>)<br>soup.find_all(<span class="hljs-built_in">id</span>=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;link&#x27;</span>)) <span class="hljs-comment">#查找link开头的标签</span><br></code></pre></td></tr></table></figure><p><font color='red'>recursive</font>: 是否对子孙全部索引，默认True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#是有返回值的</span><br>soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>, recursive=<span class="hljs-literal">False</span>) <span class="hljs-comment">#没有返回值（说明soup的根节点下没有a标签）</span><br></code></pre></td></tr></table></figure><p><font color='red'>string</font>: <>...</>中字符串区域的检索字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">soup.find_all(string=<span class="hljs-string">&#x27;Besic Python&#x27;</span>) <span class="hljs-comment">#返回值只有一个</span><br>soup.find_all(string=re.comile(<span class="hljs-string">&#x27;python&#x27;</span>)) <span class="hljs-comment">#返回值不止一个</span><br></code></pre></td></tr></table></figure><p>\<tag>(..) 等价于 \<tag>.find_all(..)<br>soup(..) 等价于 soup.find_all(..)</p><p><strong>扩展方法</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且只返回一个结果，字符串类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parents()</td><td>在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parent()</td><td>在先辈节点中返回一个结果，字符串类型，同.find()参数</td></tr><tr><td>&lt;&gt;.find_next_siblings()</td><td>在后续平行节点中搜索，返回列表类型，同.find_all参数</td></tr><tr><td>&lt;&gt;.find_next_sibling()</td><td>在后续平行节点中返回一个结果，字符串类型，同.find()参数</td></tr><tr><td>&lt;&gt;.find_previous_siblings()</td><td>在前序平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_previous_sibling()</td><td>在前序平行节点中返回一个结果，字符串类型，同.find()参数</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言</title>
    <link href="/posts/2021/04-22b180539b358b.html"/>
    <url>/posts/2021/04-22b180539b358b.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>数据类型关键字(12个)</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">声明字符型变量或函数</td><td style="text-align:center">signed</td><td style="text-align:center">声明有符号类型变量或函数</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">声明浮点型变量或函数</td><td style="text-align:center">unsigned</td><td style="text-align:center">声明无符号类型变量或函数</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">声明双精度变量或函数</td><td style="text-align:center">void</td><td style="text-align:center">声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">声明整型变量或函数</td><td style="text-align:center">struct</td><td style="text-align:center">声明结构体变量或函数</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">声明短整型变量或函数</td><td style="text-align:center">union</td><td style="text-align:center">声明共用体(联合)数据类型</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">声明长整型变量或函数</td><td style="text-align:center">enum</td><td style="text-align:center">声明枚举类型</td></tr></tbody></table></div><ul><li>控制语句关键字(12个)</li></ul><p>(1)循环语句(5个)</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">for</td><td style="text-align:center">循环语句</td></tr><tr><td style="text-align:center">do</td><td style="text-align:center">循环语句的循环体</td></tr><tr><td style="text-align:center">while</td><td style="text-align:center">循环语句的循环条件</td></tr><tr><td style="text-align:center">break</td><td style="text-align:center">跳出当前循环</td></tr><tr><td style="text-align:center">continue</td><td style="text-align:center">结束当前循环，开始下一轮循环</td></tr></tbody></table></div><p>(2)条件语句(6个)</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">if</td><td style="text-align:center">条件语句</td></tr><tr><td style="text-align:center">else</td><td style="text-align:center">条件语句否定分支 (与if连用)</td></tr><tr><td style="text-align:center">goto</td><td style="text-align:center">无条件跳转语句</td></tr><tr><td style="text-align:center">switch</td><td style="text-align:center">用于开关语句</td></tr><tr><td style="text-align:center">case</td><td style="text-align:center">开关语句分支</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">开关语句中的 “其他” 分支</td></tr></tbody></table></div><p>(3)返回语句(1个)</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">return</td><td style="text-align:center">子程序返回语句(可以带参数，也看不带参数)</td></tr></tbody></table></div><ul><li>存储类型关键字(4个)</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">auto</td><td style="text-align:center">声明自动变量</td></tr><tr><td style="text-align:center">extern</td><td style="text-align:center">声明变量是在其他文件中声明（引用变量）</td></tr><tr><td style="text-align:center">register</td><td style="text-align:center">声明寄存器变量</td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">声明静态变量</td></tr></tbody></table></div><ul><li>其他关键字(4个)</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">const</td><td style="text-align:center">声明自动变量</td></tr><tr><td style="text-align:center">sizeof</td><td style="text-align:center">计算数据类型长度</td></tr><tr><td style="text-align:center">typedef</td><td style="text-align:center">用以给数据类型取别名</td></tr><tr><td style="text-align:center">volatile</td><td style="text-align:center">说明变量在程序执行中可被隐含地改变</td></tr></tbody></table></div><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li>必须以字母、下划线开头</li><li>只能包含字母、数字、下划线</li><li>区分大小写</li><li>最打长度为32个字符</li><li>自定义标识符不可用关键字及预定义标识符</li><li>自定义标识符最好见明知义</li></ul><h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h2><p><img src="https://s1.ax1x.com/2020/07/09/UeGWh4.png" alt=""></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>常量的分类</strong></p><ul><li>整型常量：    用十进制、八进制、十六进制表示</li><li>实型常量：    用十进制小数形式，指数形式表示</li><li>字符常量：    用单引号括起来的单一字符</li><li>字符串常量： 用双引号括起来的一串字符</li><li>符号常量：     #define  符号常量  常量</li></ul><p>定义符号常量的时候注意格式：（后面没有分号）</p><p>  #define PI 3.14     =&gt;   #define只是简单的代换，这就有可能产生意想不到的错误</p><p><strong>const和#define两者的区别</strong></p><ul><li>一：<strong><em>区别</em></strong></li></ul><p>（1）就起作用的阶段而言： #define是在编译的预处理阶段起作用，而const是在 编译、运行的时候起作用。</p><p>（2）就起作用的方式而言： #define<strong>只是简单的字符串替换</strong>，没有类型检查。而const有对应的数据类型，是要进行<strong><em>判断</em></strong>的，可以避免一些低级的错误。 </p><p>（3）就存储方式而言：#define只是进行展开，有多少地方使用，就替换多少次，它定义的宏常量在内存中有<strong>若干</strong>个备份；const定义的只读变量在程序运行过程中只有<strong>一份</strong>备份。</p><p>（4）从代码调试的方便程度而言： const常量可以进行调试的，define是不能进行调试的，因为在预编译阶段就已经替换掉了。</p><ul><li>二：<strong><em>const优点</em></strong></li></ul><p>（1）const常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。</p><p>（2）有些集成化的调试工具可以对const常量进行调试，但是不能对宏常量进行调试。</p><p>（3）const可节省空间，避免不必要的内存分配，提高效率</p><p><strong>常量符号化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>coust <span class="hljs-keyword">int</span> red = <span class="hljs-number">0</span>;<br>coust <span class="hljs-keyword">int</span> yellow = <span class="hljs-number">1</span>;<br>coust <span class="hljs-keyword">int</span> green = <span class="hljs-number">2</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> color = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">char</span> *colorName = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你喜欢的颜色的代码：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;color);<br>    <span class="hljs-keyword">switch</span>(color) &#123;<br>        <span class="hljs-keyword">case</span> red: colorName = <span class="hljs-string">&quot;red&quot;</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> yellow: colorName = <span class="hljs-string">&quot;yellow&quot;</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> green: colorName = <span class="hljs-string">&quot;green&quot;</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>: colorName = <span class="hljs-string">&quot;unknown&quot;</span>; <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你喜欢的颜色是%s\n&quot;</span>, colorName);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整型数据"><a href="#整型数据" class="headerlink" title="整型数据"></a>整型数据</h3><ul><li>整型数据分类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类型名称</th><th style="text-align:center">类型说明符</th><th style="text-align:center">字节数</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">短整型</td><td style="text-align:center">short[int]</td><td style="text-align:center">2</td><td style="text-align:center">-32728~+32767</td></tr><tr><td style="text-align:center">基本整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2147483648~+2147483647</td></tr><tr><td style="text-align:center">长整型</td><td style="text-align:center">long [int]</td><td style="text-align:center">4</td><td style="text-align:center">-2147483648~+2147483647</td></tr><tr><td style="text-align:center">无符号短整型</td><td style="text-align:center">unsigned short</td><td style="text-align:center">2</td><td style="text-align:center">0~65535</td></tr><tr><td style="text-align:center">无符号整型</td><td style="text-align:center">unsigned int</td><td style="text-align:center">4</td><td style="text-align:center">同无符号短整型（或长整型）</td></tr><tr><td style="text-align:center">无符号长整型</td><td style="text-align:center">unsigned long</td><td style="text-align:center">4</td><td style="text-align:center">0~4294967295</td></tr></tbody></table></div><p>1字（word）= 2字节（byte）</p><p>1字节（byte） = 8位（bit）</p><p>1.<em>短整型</em>：含有符号位  所以大小2^15</p><p>2.<em>无符号短整型</em>：没有符号位 所以大小2^16</p><p><em>八进制</em>：在数字前加前缀0（数字0），由数字0~7组成。</p><p><em>十六进制</em>：在数字前加前缀0X或0x，由数字0~9 ，字母a~f或 A~F组成。</p><p>有符号位十进制整型数：</p><ol><li>有符号位的整型数据在内存中以补码的形式存储</li><li>正数的补码时其本身，负数的补码为 “原码取反再加1，符号位不变”。</li><li>求得十进制 “11” 的二进制值：1011</li><li>最高位为符号位，负数的符号位为 “1” ，正数的符号位为 “0”</li></ol><ul><li>整型数据的溢出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">short</span> a,b;<br>    a=<span class="hljs-number">32767</span>;<br>    b=a+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d&quot;</span>,a, b);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>32767， -32768</p></blockquote><p>C语言是<em>没有布尔类型</em>的，但是有一个头文件使用后就有了像布尔类型的变量了，#include <stdbool.h>;</p><h3 id="浮点型数据"><a href="#浮点型数据" class="headerlink" title="浮点型数据"></a>浮点型数据</h3><div class="table-container"><table><thead><tr><th style="text-align:center">类型名称</th><th style="text-align:center">有效位数</th><th style="text-align:center">值域</th></tr></thead><tbody><tr><td style="text-align:center">单精度  float</td><td style="text-align:center">7位</td><td style="text-align:center">约±3.4E±38</td></tr><tr><td style="text-align:center">双精度  double</td><td style="text-align:center">16位</td><td style="text-align:center">约±1.7E±308</td></tr><tr><td style="text-align:center">长精度  long  double</td><td style="text-align:center">至少16位</td><td style="text-align:center">—</td></tr></tbody></table></div><p><strong>整数除以整数结果为整数</strong></p><p><em>十进制小数</em>：由数字和小数点组成</p><p><em>指数</em>：以字母E或e来表示以10为底的指数。注意：E或e的两边必须都有数，右边必须时整数</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>字符型数据：用 ‘  ‘ 括起来，单个字符或转义字符，占用一个字节。</p><p>转义字符：“ \ ” 反斜线开头，后面跟一个字符或一个代码值表示，接在 “ \ ” 后的字符不再表示字面意思，而是另有其意。</p><div class="table-container"><table><thead><tr><th style="text-align:center">转义字符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">\0</td><td style="text-align:center">空字符，表示字符串结束</td></tr><tr><td style="text-align:center">\a</td><td style="text-align:center">响铃，发出系统警告声音</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">退格，将当前光标位置移动到前一列</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">水平制表符，使屏幕光标跳过8个光标。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行符，使屏幕光标移到屏幕下一行开头</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">重直制表（跳到下一个Home位置）</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页，将当前光标移到下一页的开头</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车，将当前光标移到本行的开头</td></tr><tr><td style="text-align:center">\“</td><td style="text-align:center">双引号字符</td></tr><tr><td style="text-align:center">\‘</td><td style="text-align:center">单引号字符</td></tr><tr><td style="text-align:center">\\</td><td style="text-align:center">反斜杠字符</td></tr><tr><td style="text-align:center">\ddd</td><td style="text-align:center">1~3位八进制数表示的字符</td></tr><tr><td style="text-align:center">\xhh</td><td style="text-align:center">1~2位十六进制数表示的字符</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;12345678\t0\rabc\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;h\ti\b\bj k&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>abc456789    0</p><p>h                j k</p></blockquote><p><strong>字符串</strong>：用双引号( “  “ )括起来的字符数列。</p><p>储存：每个字符串尾自动加一个  ‘\0’ 作为字符串结束标志。</p><p><strong><em>字符与字符串的比较</em></strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字符</th><th style="text-align:center">字符串</th></tr></thead><tbody><tr><td style="text-align:center">引用方式</td><td style="text-align:center">‘   ‘</td><td style="text-align:center">“   “</td></tr><tr><td style="text-align:center">长度</td><td style="text-align:center">1</td><td style="text-align:center">&gt;=1</td></tr><tr><td style="text-align:center">结束标志</td><td style="text-align:center">无结束标志</td><td style="text-align:center">\0</td></tr><tr><td style="text-align:center">是否可直接赋值</td><td style="text-align:center">可以</td><td style="text-align:center">不可以</td></tr></tbody></table></div><p>字符：是用单引号引用起来的一个字符或转义字符，长度为1。</p><p>字符串：是用双引号引用起来的一系列字符，长度大于等于1，以\0结束。</p><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>标准ASCII，值为0~127，表示所有的大、小写字母，数字0到9，标点符号，以及在美式英语中使用的特殊控制字符</p><div class="table-container"><table><thead><tr><th style="text-align:center">对应的字符</th><th style="text-align:center">ASCII值</th></tr></thead><tbody><tr><td style="text-align:center">0~9</td><td style="text-align:center">48~57</td></tr><tr><td style="text-align:center">A~Z</td><td style="text-align:center">65~90</td></tr><tr><td style="text-align:center">a~z</td><td style="text-align:center">97~122</td></tr><tr><td style="text-align:center">回车</td><td style="text-align:center">13</td></tr></tbody></table></div><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p><strong>自增自减</strong></p><p>1.前缀形式：++变量，—变量</p><p>作用：先将变量自增（或自减），然后将自加（或自减）后的结果赋给表达式。</p><blockquote><p>a=++i;     ==&gt;   i=i+1; a=i;</p></blockquote><p>2后缀形式：变量++，变量—<br>作用：先给表达式赋值，然后变量自增（或自减）。</p><blockquote><p>b=i—;     ==&gt;   b=i; i=i-1;</p></blockquote><p><strong>逗号表达式</strong></p><p>用逗号运算符把多个表达式连接起来的式子，称为<em>逗号表达式</em>。</p><ol><li><p>各表达式之间用逗号隔开</p></li><li><p>从左至右每个表达式的值</p></li><li><em>最后一个表达式的值为整个表达式的值</em></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdto.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a,b;<br>    b=(a=<span class="hljs-number">3</span>*<span class="hljs-number">5</span>, a*<span class="hljs-number">4</span>, a+<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d, b=%d&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>a=15, b=20</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>1.算术运算符： 优先级      <em>+、-</em>    &lt;    <em>*、\、%</em></p><p>2.关系运算符： 优先级      <em>&gt;，&gt;=，&lt;，&lt;=</em>    &lt;    <em>==，!=</em></p><p><strong>注</strong>：关系运算符优先级别低于算术运算，高于赋值运算符</p><blockquote><p>c &gt; a+b     ==&gt;     c &gt; (a+b)</p><p>a &gt; b == c      ==&gt;     (a+b) == c</p><p>a = b &gt; c      ==&gt;     a = (b&gt;c)</p></blockquote><p>用关系运算符将两个表达式（算术、关系、逻辑、赋值表达式等）连接起来所构成的表达式，称为<strong>关系表达式</strong>。</p><p>关系表达式的值只有两个，1和0</p><p>3.逻辑运算符： 优先级      ！高于算术运算；&amp;&amp;高于||，&amp;&amp;和||都低于关系运算符，高于赋值运算符</p><p>用逻辑运算符把表达式连接起来的式子，称为<strong>逻辑表达式</strong>。</p><p>逻辑表达式的值也只有两个，1和0</p><p>所以赋值运算符时<em>优先级最低</em>的</p><p><strong>逻辑表达式的值</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">A&amp;&amp;B</th><th style="text-align:center">A\</th><th style="text-align:center">\</th><th>B</th><th>!A</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">非0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">非0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">非0</td><td style="text-align:center">非0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p>A&amp;&amp;B：当AB两个表达式同时为真时，整个表达式为真，否则为假。<br>AlIB：当AB两个表达式有一个为真时，整个表达式为真，其他为假。<br>!A：当表达式A为真时则为假，当A为假时则为真。</p><p>（非0就是真。只有0才为假）</p><blockquote><p>a=3, b=4, c=5                    优先级：!、*、-，+、&amp;&amp;、||、=</p><p>x=a||b*c&amp;&amp;b-c+!a</p><p>x=3||20&amp;&amp;(-1)+0</p><p>x=3||1                        63, 103, 227</p></blockquote><p>三目运算符</p><p>格式：   表达式1 ? 表达式2:  表达式3</p><p>表达式1为真时取表达式2的值；表达式1为假时取表达式3的值</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p><img src="https://s1.ax1x.com/2020/07/09/UmyKv6.png" alt="UmyKv6.png"></p><p><strong>语句</strong>：组成程序的<strong>基本元素</strong>，以 “ ; “ 作为结尾。</p><ol><li><p>表达式语句：表达式 + “ ; “</p></li><li><p>函数调用语句：函数名(参数表) + “ ; “</p></li><li><p>控制语句：控制各语句执行的顺序及次数</p></li><li><p>复合语句：以一对大括号括起来的0条或多条语句</p></li></ol><p><strong>作用</strong>：在程序的某些地方，语法上只允许出现一条语句，而程序员可能需要多条语句来完成程序功能，这时就可用<em>复合语句</em>。</p><ol><li>空语句：一个分号构成的语句</li></ol><p><strong>作用</strong>：在程序某些地方，语法上要求必须有语句出现，而程序员可能没有代码要写，或者留待以后扩充，就可以写一条<em>空语句</em>。</p><p><strong>算法</strong>是指解决问题的一种方法或一个过程。</p><p>算法特征：有穷性、确切性、≥0个输入、有输出、可行性</p><p><strong>程序</strong>是算法用某种程序设计语言的具体实现，程序可以不满足算法的性质。</p><p><em>程序</em>是对解题方案的准确而完整的描述，是解决问题的<em>一系列指令</em>。</p><p><strong>流程图</strong></p><p><img src="https://s1.ax1x.com/2020/07/09/UmgmCj.png" alt="UmgmCj.png"></p><p><img src="https://s1.ax1x.com/2020/07/09/Umgax1.png" alt="Umgax1.png"></p><p>以特定的图形符号加上说明，表示算法的图，称为流程图或框图。</p><p>没有种类，有并行的图，比如关系图，类图等</p><h2 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h2><h3 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h3><p>C语言的输入和输出操作是通过函数来实现的，在使用前必须在程序的前面使用命令：#include <stdio.h></p><blockquote><p>printf(“格式控制字符串”,  输出列表(变量、常量、表达式));</p></blockquote><p><strong>说明</strong>：</p><p>（1）格式控制字符串，包括普通字符和格式说明两部分，格式说明由%开头，后跟格式字符及修饰等组成；</p><p>（2）格式控制字符串中的普通字符按原样输出；</p><p>（3）格式说明与输出表列输出项的个数要一致，格式说明的作用是使对应的输出项按指定的格式输出；</p><p>（4）输出表列由输出项组成，两个输出项之间用逗号分隔；</p><p><strong>格式字符及其作用</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">格式字符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">d或i</td><td style="text-align:center">按有符号十进制基本整型数据形式输出</td></tr><tr><td style="text-align:center">ld</td><td style="text-align:center">按有符号十进制长整型数据形式输出</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">按字符形式输出</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">按字符串形式输出</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">按小数形式输出单精度实数</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">按无符号八进制整型数据形式输出</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">按无符号十进制整型数据形式输出</td></tr><tr><td style="text-align:center">x或X</td><td style="text-align:center">按无符号十六进制整型数据形式输出</td></tr><tr><td style="text-align:center">e或E</td><td style="text-align:center">按指数形式输出单精度实数</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">输出%本身</td></tr></tbody></table></div><p>可以在格式字符中添加数字来达到不同的输出需求</p><p>%3.2f    %1.2f    %0.6f        等等</p><p>字符输出函数：     putchar(ch);            向屏幕输出一个字符</p><p><strong>说明</strong>：<br>（1）函数参数ch，可以是<em>字符变量</em>或<em>整型变量</em>或<em>字符常量</em>；<br>（2）函数的返回值是输出的字符。</p><h3 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h3><blockquote><p>scanf(“格式控制字符串”, 地址表列);</p></blockquote><p>输入项组成，两个输入项之间用逗号分隔，输入项由取地址运算符&amp;和变量名组成，即：&amp;变量名;</p><p><strong>输入数据流的分割方法</strong>：<br>① 根据格式说明规定的数据类型从数据流中取得数据，即当数据流的数据类型与格式说明的类型不一致时，就认为这一数据项结束；</p><p>② 根据格式说明中指定的域宽从数据流中分割数据；</p><p>③ 通过在格式字符串指定分割符来分割数据，分割符可以是一切非格式字符；</p><p>④ 格式字符串中没有指定分割符时，常使用空格、Tab键、回车键来分割数据。</p><p><em>说明</em>：如果输入的数据多于变量的个数时，余下的数据可为下一个  scanf()  函数使用。</p><blockquote><p>getchar(  )        从键盘读入一个字符</p></blockquote><p>说明：<br>（1）该函数没有参数，函数的返回值是从输入设备得到的字符；<br>（2）从键盘输入的数据通过回车键确认结束；<br>（3）该函数得到的字符可以赋给一个字符变量或整 型变量，也可以不赋给任何变量，而作为表达式的一部分；</p><p>（4）常用  if ( (ch=getchar()) == ‘Y’ ) 确定用户输入的字符是否是所需的字符。<br>（5）该函数常与putchar()配合使用，将读入的字符输出到终端。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a,b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%*d%d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>, a, b);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>123 45 678</p><p>123,678</p></blockquote><p>%*d：抑制字符，表示虚读</p><p><em>回车符</em>是字符，所以在应用的时候有要注意的地方</p><p>在上一个scanf()函数中的回车符，如果下一行是接受字符的scanf()函数，那么回车符会被捕获，从而出现意想不到的错误。</p><p>处理方法，在两个scanf()函数之间加一个getchar()函数，getchar()函数来<em>捕获回车符</em>，这样就没有错误了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> num,age;<br>    <span class="hljs-keyword">char</span> sex;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你的两位数字号：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入性别(F/M)：&quot;</span>);<br>    getchar();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;sex);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;age);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d号性别是%c，年龄是%d岁。\n&quot;</span>, num, sex, age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>请输入你的两位数字号：20<br>请输入性别(F/M)：F<br>请输入你的年龄：12<br>20号性别是F，年龄是12岁。</p></blockquote><p>scanf(  )  函数在读取数据时，会将输入的数据流存储在缓冲区中，根据指定的数据类型从输入流中匹配，当输入的数据与指定<em>类型不匹配</em>时，就会结束输入；当下一个输入为字符型时，需要清空缓冲区中的回车符，可以用getchar(  )  函数接收掉字符。</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p><img src="https://s1.ax1x.com/2020/07/10/UumI4s.png" alt="UumI4s.png"></p><p><strong>头文件</strong>：用于保存程序的声明，包括：功能函数原型、数据类型的声明、数据接口声明等。</p><p><strong>文件包</strong>含是指一个源文件可以将另一个源文件的全部内容包含进来。</p><p>头文件括起来的区别：</p><ol><li>尖括号：到编译系统指定的标准目录(\include)下面查找该头文件，若没有找到就报错。多用于包含<em>标准头文件</em>。</li><li>双引号：首先到当前工作目录中查找头文件；若没找到，再到编译系统指定的标准目录中查找。多用于包含<em>用户自定义的头文件</em>。</li></ol><p><strong>文件包含预处理</strong>时将查找指定的被包含文件，并将其复制到#include命令位置.上。</p><p><strong>常见的头文件</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">头文件名称</th><th style="text-align:center">作用</th><th style="text-align:center">头文件名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">stdio.h</td><td style="text-align:center">输入输出</td><td style="text-align:center">local.h</td><td style="text-align:center">地区化</td></tr><tr><td style="text-align:center">string.h</td><td style="text-align:center">字符串处理</td><td style="text-align:center">windows.h</td><td style="text-align:center">系统函数</td></tr><tr><td style="text-align:center">math.h</td><td style="text-align:center">数学函数</td><td style="text-align:center">errno.h</td><td style="text-align:center">错误处理</td></tr><tr><td style="text-align:center">stdlib.h</td><td style="text-align:center">数值转换、内存分配等问题</td><td style="text-align:center">ctype.h</td><td style="text-align:center">字符处理</td></tr><tr><td style="text-align:center">time.h</td><td style="text-align:center">时间函数</td><td style="text-align:center">signal.h</td><td style="text-align:center">信号处理</td></tr></tbody></table></div><p>程序设计方法</p><ol><li>顺序结构程序设计：一般程序都是顺序结构</li><li>选择结构程序设计：if 语句，weitch case 语句</li><li>循环结构程序设计：while 循环语句，do while 循环语句，for 循环语句</li></ol><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong>switch . . . case循环</strong></p><p>说明：</p><ol><li>表达式必须是<em>整型</em>或<em>字符型</em>表达式，每个常量表达式必须是相应的整数或字符，且两个常量值不能相同；</li><li>该结构从某-一个case进入后，将执行该入口中的语句组及后面所有语句组，如果只需执行一个语句组的操作，应在该语句组中加break语句跳出switch结构。</li></ol><p><em>注意</em>：</p><p>如果case语句中要<em>重新定义新的变量</em>，那么必须用花括号把case内的语句括起来，不然要报错。</p><p><strong>for循环</strong></p><blockquote><p>for (  表达式1;  表达式2;  表达式3  )</p><p>{  循环体;  }</p></blockquote><p>注意事项：</p><ol><li>for语句中三个表达式都可以省略，但是 “ ; ” 不能省略</li><li>如果省略表达式1，则应该在for语句前给循环变量赋初值</li><li>如果省略表达式2，循环陷入死循环，应该在其它位置安排检测及退出循环机制</li><li>如果省略表达式3，则应该其它位置安排使循环趋向于结束的工作</li></ol><p><strong>while循环</strong></p><blockquote><p>while(表达式) {</p><p>​    语句顺序;</p><p>}</p></blockquote><p><em>执行过程</em>：当表达式为真时，执行语句序列，执行完后再跳到while语句，表达式为假时执行循环体的下一一个语句。</p><p><em>注意</em>：</p><ol><li>while循环先判断后循环</li><li>循环体应该写成复合语句的形式</li><li>避免“死循环”</li></ol><p><strong>do . . . while循环</strong></p><blockquote><p>do {</p><p>​    语句序列;</p><p>}while(表达式);</p></blockquote><p><em>执行过程</em>：先执行语句序列，再判断循环条件，<br>如果表达式为真，再跳到do语句，表达式为假时执行循环体的下一个语句。</p><p><em>注意</em>：</p><ol><li>do . . . while先执行循环体再判断条件</li><li>循环体应该写成复合语句的形式</li><li>避免“死循环“</li></ol><p><em>嵌套循环</em>是指-一个循环语句的循环体内包含另一个完整的循环结构。</p><h3 id="终止语句"><a href="#终止语句" class="headerlink" title="终止语句"></a>终止语句</h3><p><strong>breaak语句</strong></p><ol><li><em>格式</em>：break；</li><li><em>功能</em>：强行结束<em>循环</em>或<em>switch选择分支</em>，转向执行循环语句或选择结构的下一条语句。</li></ol><p><strong>continue语句</strong></p><ol><li><em>格式</em>：continue；</li><li><em>功能</em>：跳过<em>循环体其余语句</em>，转向计算“循环变量增值”表达式（for循环），或者转向“循环条件”的判定（while和do-while循环）。</li></ol><p><strong>两者对不同循环的区别</strong></p><p><img src="https://s1.ax1x.com/2020/07/11/UQYFF1.png" alt="UQYFF1.png"></p><p><img src="https://s1.ax1x.com/2020/07/11/UQYVSK.png" alt="UQYVSK.png"></p><p><img src="https://s1.ax1x.com/2020/07/11/UQt1HJ.png" alt="UQt1HJ.png"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数：完成特定工作的独立程序模块</p><p><em>作用</em></p><ol><li>提高程序开发的效率，使程序易于管理降低程序的复杂性。</li><li>函数可以被重复使用</li></ol><p>函数：包含标准库函数和自定义函数；也可以分为有参函数和无参函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">[函数类型]函数名(函数类型 参数[, 数据类型 参数<span class="hljs-number">2</span> . . . .]) &#123;<br>    说明语句部分;<br>    可执行语句部分;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>有参数时称为有参函数，没参数时称为无参函数，无参函数在括号中用void。</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/12/U1hFQf.png" alt="U1hFQf.png"></p><p>函数说明的两种方法</p><p>①  <em>谁调用谁说明</em>：函数说明语句放在调用函数的函数体中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br>    . . .<br>&#125;<br></code></pre></td></tr></table></figure><p>②  <em>预先统一说明</em>：函数说明通常放在所有函数定义体之前。在这种方式下，所有调用函数都无需再对自定义函数进行说明。<br>如，可以将对maxnum（）函数的说明放在程序文.件开始处：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>    . . .<br>&#125;<br></code></pre></td></tr></table></figure><p>显然，对于被多个函数调用的自定义函数而言，采用预先统一说明方式进行说明，可以有效地减少函数说明次数。<br><em>注意</em>：如果被调用函数的定义体，出现在调用函数之前，可以缺省说明。</p><p><strong>函数的嵌套</strong></p><p><em>函数的嵌套调用</em>：在调用-个函数的过程中又调用另一个函数。</p><p><strong>函数的递归调用</strong></p><p>函数的递归调用即在调用函数时直接或间接的调用函数自身</p><p>函数递归调用时一定要存在可使递归调用终止的条件，否则导致出现无限递归</p><p><strong>内部函数</strong></p><p><em>内部函数</em>（又称<em>静态函数</em>）：只能被本文件中其他函数所调用的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> 类型标识符 函数名(形参表)<br><br>例如：<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br></code></pre></td></tr></table></figure><p>因为内部函数只在本文件内部起作用，所以在不同的文件中可以有相同的函数名，互不影响。</p><p><strong>外部函数</strong></p><p><em>外部函数</em>：能够被其他文件调用的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">[<span class="hljs-keyword">extern</span>] 类型标识符函数名(形参表)<br>例如：<span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> max（<span class="hljs-keyword">int</span> a，<span class="hljs-keyword">int</span> b以&#125;<br></code></pre></td></tr></table></figure><p>调用外部函数时，要将外部函数写在头文件中，在需要调用外部函数的文件中使用include命令将头文件包含进来，然后可直接调用头文件中的外部函数。</p><h2 id="头文件的创建与应用"><a href="#头文件的创建与应用" class="headerlink" title="头文件的创建与应用"></a>头文件的创建与应用</h2><p><strong>头文件分类</strong></p><p><em>头文件</em>用来保存程序的声明，包括：功能函数原型、数据类型的声明、数据接口声明等。</p><p><em>头文件包含</em>：系统自带头文件和用户自定义头文件</p><p><em>提醒</em>：自定义头文件只存在本机，所以只能在本机用，如果要在其他机器上使用需要将自定义头文件复制到与需要使用的源文件同-路径，或者include文件夹下。</p><p>自定义只需要把你所需要的函数保存在一个.h的文件中，该头文件是可以添加好多的函数，但是要注意那些函数是不能用static来修饰的，并且头文件放的位置也有要求。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>一维数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">类型标识符 数组名[整型常量表达式]<br><br>数据类型 数组名[常量表达式] = &#123;初值表&#125;<br></code></pre></td></tr></table></figure><p>一维数组可在定义时<em>初始化</em>即给数组元素赋初值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<span class="hljs-comment">//给数组中的每一个元素赋值</span><br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//给数组中前三个元素赋值</span><br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//给数组中所有数据元素赋值为0</span><br></code></pre></td></tr></table></figure><p><em>注意</em>：</p><ol><li>对数组所有元素赋初值，此时数组定义中数组长度可以<em>省略</em></li><li>对数组部分元素赋初值，此时数组长度不能省略</li><li>对数组的所有元素赋初值0</li></ol><p><strong>一维数组的引用</strong></p><p>一维数组元素的<em>引用形式</em>：数组名[下标]              数组的下标从0开始</p><p><strong>二维数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">类型标识符 数组名[整型常量表达式<span class="hljs-number">1</span>][整型常量表达式<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>二维数组可在定义时<em>初始化</em>即给数组元素赋初值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<span class="hljs-comment">//分行给二维数组中所有元素赋值</span><br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<span class="hljs-comment">//不分行给二维数组中元素赋值</span><br><span class="hljs-keyword">int</span> arr[][<span class="hljs-number">4</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<span class="hljs-comment">//二维数组所有元素赋初值，第一维的长度可以省略</span><br><span class="hljs-keyword">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;.&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<span class="hljs-comment">//对每行部分元素赋初值</span><br></code></pre></td></tr></table></figure><p><strong>二维数组的引用</strong></p><p>二维数组元素的<em>引用形式</em>：数组名[下标1] [下标2]             数组的下标从0开始</p><p><strong>总结</strong>：</p><ol><li>二维数组中每个数据元素的数据类型相同。</li><li>二维数组初始化时，可以分行给赋值，也可以不分行赋值；对二维数组所有元素赋初值，二维数组第一维的长度可以省略。</li><li>二维数组通过下标引用数组元素，行下标与列下标都是从0开始。</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>字符数组</strong></p><p>字符数组也是数组，只是数组元素的类型为<em>字符型</em>。所以字符数组的定义、初始化、字符数组元素的引用与一般的数组类似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> 数组名[整型常量表达式]<br></code></pre></td></tr></table></figure><p><strong>字符数组初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>&#125;;<span class="hljs-comment">//以字符常量的形式对字符数组初始化</span><br><span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;abcd&quot;</span>;<span class="hljs-comment">//以字符串的形式对字符数组初始化。系统会自动在最后一个字符后加&#x27;\0&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>字符数组的输入与输出</strong></p><ol><li>逐个字符输入/输出：采用”%c”格式说明和循环，像处理数组元素一样输入输出。</li><li>整串输入/输出：采用“%S”格式符来实现。</li></ol><p><img src="https://s1.ax1x.com/2020/07/12/U8mjpD.png" alt="U8mjpD.png"></p><p><strong>总结</strong>：</p><ol><li>字符数组与一维数组类似，定义与引用方法相同。</li><li>字符数组可以逐个字符操作，也可以作为字符串操作。</li><li>字符串的结束标志为’\0’，所以在定义字符数组长度时至少要是字符串的长度加1。</li></ol><p><strong>字符串处理函数</strong></p><p><em>标准库函数</em>是由系统建立的具有一定功能的函数。在使用库函数时要将库函数所在文件名用#include&lt;&gt;包含进来。</p><p><em>库函数优点</em>：</p><ol><li>准确性</li><li>高效性</li><li>可移植性</li></ol><p><em>函数</em>：</p><p>1.字符串<em>输入</em>gets(str)</p><p>功能：从键盘输入一个字符串（<em>可包含空格</em>，scanf不可以），直到遇到回车符，并将字符串存放到由str指定的字符数组（或内存区域）中。</p><p>2.字符串<em>输出</em>puts(str)</p><p>功能：从str指定的地址开始，依此将存储单元中的字符输出到显示器，直到遇到“字符串”结束标志</p><p>3.字符串<em>长度</em>strlen(str)</p><p>功能：统计str为 起始地址的字符串的长度（<em>不包括</em>“字符串结束标志”），并将其作为函数值返回。</p><p>4.字符串<em>连接</em>函数strcat(str1, str2)</p><p>功能：将str2为 首地址的字符串连接到str1字符串的后面。从str1 原来的’\0’（字符串结束标志）处开始连接。</p><p>5.字符串<em>复制</em>函数strcpy(str1, str2)</p><p>功能：将str2为首地址的字符串复制到str1为首地址的字符数组中。</p><p>6.字符串<em>比较</em>函数strcmp(strl, str2)</p><p>功能：将str1，str2为首地址的两个字符串进行比较，比较的结果由返回值表示。</p><p>比较大小：</p><ol><li>当str1=str2，函数的返回值为：0；</li><li>当str1&lt;str2，函数的返回值为：-1；</li><li>当str1&gt;str2，函数的返回值为：1；</li></ol><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p><strong>变量的存储地址</strong></p><p>变量存储空间的第一个 字节对应的内存地址可看作是<em>存储地址</em>。</p><p>根据内存地址就可找到相应的存储单元，所以通常也把地址称为<em>指针</em>。</p><p><em>指针变量</em>：C语言允许用指针变量来<em>存放地址</em>。<br>指针变量的值就是数据的内存<em>存储地址</em>。</p><p>指针占4个字节，不管指向什么类型都是4个字节</p><p><strong>指针变量的定义</strong></p><blockquote><p>类型标识符   *指针变量名  ;</p></blockquote><p>说明：</p><ol><li>“指针变量名” 前面的 “*” 表示该变量是指针变量。</li><li>“类型标识符” 表示该指针变量所指向的变量的数据类型。</li><li>一个指针变量只能指向一个同类型的变量。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *p;      <span class="hljs-comment">//定义int型指针变量，变量名为p</span><br><span class="hljs-keyword">float</span> *pf;    <span class="hljs-comment">//定义float型指针变量，变量名为pf</span><br><span class="hljs-keyword">char</span> *pc;     <span class="hljs-comment">//定义char型指针变量，变量名为pc</span><br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> *p;==&gt; <span class="hljs-keyword">int</span> *p=&amp;n;<br>p = &amp;n;<br><br><span class="hljs-keyword">char</span> str[<span class="hljs-number">20</span>];   <span class="hljs-comment">//定义char型变量名为str的一维字符数组</span><br><span class="hljs-keyword">char</span> *ps;<br>ps = str;<br><br>gets(ps); &lt;==&gt; gets(str);<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>指针变量也可以被初始化为NULL，它的值为0。当指针值为零时，指针不指向任何有效数据，也称为<em>空指针</em>。</p><blockquote><p>*指针变量名</p></blockquote><p>说明：</p><p>​        “*” 为指针运算符，表示指针变量所指向内存单位地址的数据内容</p><p>地址可以用指针表示</p><p>“&amp;” ：取地址运算符</p><p>“*” ：指针运算符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> ch1[<span class="hljs-number">10</span>], *ch2=ch1;<br>ch1++;  <span class="hljs-comment">//错误：lvalue required as increment operand</span><br><br>ch2++;  <span class="hljs-comment">//正确只能是这个</span><br></code></pre></td></tr></table></figure><p>只是改变p的地址值，对ch1的值没有任何改变</p><p><strong>指针与一维数组</strong></p><blockquote><p>int a[5];</p><p>int *p;            ==&gt;        p = &amp;a[0];</p><p>p = a; //将数组a的首地址赋值给指针p</p></blockquote><p>a+1是a[1]的地址，a+i就是a[i]的地址</p><p><em>等价关系</em>：</p><ol><li>数组元素地址：&amp;(a[i])    &lt;=\=>    a+i    &lt;\==&gt;    p+i;</li><li>数组元素值：a[i]     &lt;=\=&gt;     <em>(a+i)     &lt;\=\=&gt;     </em>(p+i)</li></ol><p><strong>指针与二维数组</strong></p><p><em>说明</em>：</p><ol><li>a[0]、a[1]、a[2]分别代表二维数组各行的首地址</li><li>a[0]代表第0行中第0列元素的地址 —&gt; &amp;a[0][0];    a[0]+1即代表第0行第1列元素的地址 —&gt; &amp;a[0][1];</li><li>可用指针形式代表各行元素的首地址。a[0]等价于*(a+0) ，a[1]等价于*(a+1)。则*(a+i)+j，即代表第i行第j列元素的<em>地址</em>；</li></ol><p>a[i][j]的<em>地址</em>表示方法：</p><ol><li>&amp;a[i][j]</li><li>a[i]+j</li><li>*(a+i)+j</li></ol><p>a[i][j]的<em>值</em>表示方式：</p><ol><li>a[i][j]</li><li>*(a[i]+j)</li><li>*(*(a+i)+j)</li><li>(*(a+i))[j]</li></ol><p><strong>指针与函数</strong></p><p>指针作函数参数<br>    ● 形参指针指向实参数组的首个元素的地址<br>    ● 指针作形参，可以改变指针所指向的实参变量的值</p><blockquote><p>类型标识符   *函数名([形参列表])；</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> *<span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *x, <span class="hljs-keyword">int</span> *y)</span></span>;<br>  f是函数名，x、y是形参<br>  函数返回值为整型指针类型，也就是地址类型<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>函数定义时，在函数名前加 “ <em> “ 指明函数返回值为</em>地址值*。</li><li>函数返回值语句return中指明函数返回的是<em>地址值</em>。</li><li>主调函数中返回值的接收者也为<em>指针类型</em>。</li></ol><p>用字符指针操作字符串<br>      ● 字符指针可操作字符串<br>      ● 操作不确定字符串长度时，使用字符指针更节省内存空间.</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><strong>结构体</strong>是一种构造类型，它由若干“成员”组成。每一个成员可以是一个基本数据类型或者又是一个构造类型。结构体既然是一种“构造”而成的数据类型，那么<em>在使用之前必须先定义它</em>，也就是构造它。</p><p><strong>结构体定义</strong></p><p>（一） 用struct定义结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>[结构体名] &#123;</span><br>    类型标识符<span class="hljs-number">1</span>  成员名<span class="hljs-number">1</span>;<br>    类型标识符<span class="hljs-number">2</span>  成员名<span class="hljs-number">2</span>;<br>    .....<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-keyword">char</span> num[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> sex;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">float</span> score;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ol><li>struct是关键字，在定义和使用中都不能省略。</li><li>结构体中的每个成员均需作为类型说明，结构体类型名和成员名的命名应符合标识符的命名规则。</li><li>成员名可以与程序中的变量名同名，二者不代表同一对象，互不干扰。</li><li>注意末尾的 “ ; ” 号必不可少</li></ol><p>（二） 用typedef定义结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>[结构体名] &#123;</span><br>    类型标识符<span class="hljs-number">1</span> 成员名<span class="hljs-number">1</span>;<br>    类型标识符<span class="hljs-number">2</span> 成员名<span class="hljs-number">2</span><br>   .....<br>&#125;新类型标识符;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-keyword">char</span> num[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> sex;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">float</span> score;<br>&#125;STU;<br></code></pre></td></tr></table></figure><p><strong>结构体赋初值</strong>：</p><ol><li><p>struct 结构体名 结构体变量 = {初始数据};</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-keyword">char</span> num[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> sex;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">float</span> score;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu1</span> =</span> &#123;<span class="hljs-string">&quot;102&quot;</span>,<span class="hljs-string">&quot;Zhangping&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">78.5</span>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>{…….}结构体变量={初始化数据};</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-keyword">char</span> num[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> sex;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">float</span> score;<br>&#125;stu1 = &#123;<span class="hljs-string">&quot;102&quot;</span>,<span class="hljs-string">&quot;Zhangping&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">78.5</span>&#125;;<br></code></pre></td></tr></table></figure><p> 3.{…….}结构体变量={初始数据};</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">char</span> num[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> sex;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">float</span> score;<br>&#125;stu1 = &#123;<span class="hljs-string">&quot;102&quot;</span>,<span class="hljs-string">&quot;Zhangping&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">78.5</span>&#125;;<br></code></pre></td></tr></table></figure></li></ol><p><strong>结构体变量成员的引用</strong>：</p><ol><li><p>引用结构体变量中的一个成员</p><p> ​    结构体变量名.成员名;</p></li><li><p>结构体嵌套时应逐级引用</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">stu1.birthday.year;<br>stu1.birthday.month;<br>stu1.birthday.day;<br></code></pre></td></tr></table></figure></li><li><p>同一种类型的结构体变量间可之间赋值</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">stu1 = stu2;<br>stu1.birthday = stu2.birthday;<br></code></pre></td></tr></table></figure></li></ol><p><strong>说明</strong>：</p><p>一个结构体变量，系统分配给他的内存是成员中占内存<em>最大者所需内存量</em> </p><p><strong>结构体大小计算</strong>：</p><ul><li>1) 结构体变量的首地址能够被其最宽基本类型成员的大小所整除；</li><li>2) 结构体每个成员相对于结构体首地址的偏移量（offset）都是<em>成员大小的整数倍</em>，如有需要编译器会在成员之间加上填充字节（internal adding）；</li><li>3) 结构体的总大小为结构体<em>最宽基本类型成员大小的整数倍</em>，如有需要编译器会在最末一个成员之后加上填充字节（trailing padding）</li></ul><p>主要关注的是第三条，就是按照最大的长度来填空。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x</span> &#123;</span> <span class="hljs-comment">//double最长 8个位置，按照8来填空</span><br>   <span class="hljs-keyword">char</span> a;  <span class="hljs-comment">//占第一个8中的开头 0</span><br>   <span class="hljs-keyword">int</span> b;  <span class="hljs-comment">//占第一个8中的 4-7 (int占4个，只会占4的倍数)</span><br>   <span class="hljs-keyword">double</span> c;<span class="hljs-comment">//占第二个8中的 0-7 (占满)</span><br>&#125;s1; <span class="hljs-comment">//总共16个</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x</span> &#123;</span> <span class="hljs-comment">//double最长 8个位置，按照8来填空</span><br>   <span class="hljs-keyword">char</span> a;<span class="hljs-comment">//占第一个8中的开头 0</span><br>   <span class="hljs-keyword">double</span> b;<span class="hljs-comment">//占第二个8的 0-7 (第一个8剩的7不够) (占满)</span><br>   <span class="hljs-keyword">int</span> c;<span class="hljs-comment">//占第三个8的 0-3</span><br>&#125;s2; <span class="hljs-comment">//总共24个</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x</span> &#123;</span> <span class="hljs-comment">//double最长 8个位置，按照8来填空</span><br>   <span class="hljs-keyword">double</span> a;<span class="hljs-comment">//占第一个8的 0-7 (占满)</span><br>   <span class="hljs-keyword">char</span> b;<span class="hljs-comment">//占第二个8的 0 (开头)</span><br>   <span class="hljs-keyword">int</span> c;<span class="hljs-comment">//占第二个8的 4-7 (int占4个，只会占4的倍数)</span><br>&#125;s3; <span class="hljs-comment">//总共16个</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x</span> &#123;</span> <span class="hljs-comment">//double最长 8个位置，按照8来填空</span><br>   <span class="hljs-keyword">double</span> a;   <span class="hljs-comment">//占第一个8的 0-7 (占满)</span><br>   <span class="hljs-keyword">char</span> b;   <span class="hljs-comment">//占第二个8中的开头 0</span><br>   <span class="hljs-keyword">int</span> c;   <span class="hljs-comment">//占第二个8的 4-7 (int占4个，只会占4的倍数)</span><br>   <span class="hljs-keyword">char</span> d;   <span class="hljs-comment">//占第三个8的 0 (重新开辟一个)</span><br>&#125;s4; <span class="hljs-comment">//总共24个</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x</span> &#123;</span> <span class="hljs-comment">//double最长 8个位置，按照8来填空</span><br>   <span class="hljs-keyword">int</span> a;<span class="hljs-comment">//占第一个8的 0-3</span><br>   <span class="hljs-keyword">double</span> b;<span class="hljs-comment">//占第二个8的 0-7 (第一个8剩下的不够填) (占满)</span><br>   <span class="hljs-keyword">char</span> c;<span class="hljs-comment">//占第三个8的 0 (第二个没有了)</span><br>   <span class="hljs-keyword">int</span> d;<span class="hljs-comment">//占第三个8的 4-7</span><br>   <span class="hljs-keyword">char</span> e;<span class="hljs-comment">//占第四个8的 0 (第三个没了)</span><br>&#125;s5; <span class="hljs-comment">//总共32个</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">x</span> &#123;</span><br>    <span class="hljs-keyword">char</span> a;<br>    <span class="hljs-keyword">int</span> b;<br>    <span class="hljs-keyword">double</span> c;<br>&#125;; <span class="hljs-comment">//占16个</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">y</span> &#123;</span><br>    <span class="hljs-keyword">char</span> a;  <span class="hljs-comment">//1个</span><br>    x b;<br>&#125;; <span class="hljs-comment">//17个，但是要是8的倍数，所以是24个</span><br></code></pre></td></tr></table></figure><p><em>指针占4个字节</em>，不管指向什么类型都是4个字节</p><h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><p><em>几个不同数据类型</em>的变量共同占用一段内存的结构体称作 “共用体” 类型结构，简称共用体。共用体又称为 “联合体”。</p><p><strong>定义共用体</strong></p><p>（一）</p><ol><li>“union” 是定义共用体的关键字；</li><li>“共用体名” 是用户定义的新类型变量名；</li><li>个成员的数据类型不相同；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> 共用体名 &#123;</span> <br>    类型<span class="hljs-number">1</span> 成员<span class="hljs-number">1</span>;<br>    类型<span class="hljs-number">2</span> 成员<span class="hljs-number">2</span>;<br>    . . . . <br>&#125;;<br></code></pre></td></tr></table></figure><p>（二）</p><p>​        在定义共用体类型的同时，定义共用体变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> 共用体名 &#123;</span><br>    类型<span class="hljs-number">1</span> 成员<span class="hljs-number">1</span>;<br>    类型<span class="hljs-number">2</span> 成员<span class="hljs-number">2</span>;<br>    . . . . <br>&#125;变量名<span class="hljs-number">1</span>, 变量名<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><strong>定义共用体变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> 共用体名 变量名;</span><br><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Score</span> <span class="hljs-title">sc</span>;</span><br>定义sc为共用体Score类型的变量<br></code></pre></td></tr></table></figure><p><strong>共用体起别名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> 共用体名 别名;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Score</span> <span class="hljs-title">Score</span>;</span> <span class="hljs-comment">//以后可以直接使用Score，即Score=union Score</span><br>Score sc;   &lt;==&gt;   <span class="hljs-keyword">union</span> Score sc;<br></code></pre></td></tr></table></figure><p><strong>共用体成员引用</strong></p><p>共用体变量名.成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">例如：sc.i;<br><br>共用体变量sc中的成员i;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/07/15/UwTc5j.png" alt="UwTc5j.png"></p><p>共用体变量所有成员<em>共享同一段内存空间</em>，他占用的内存空间是所需内存<em>最大的成员的空间</em></p><p><strong>共同体变量赋值</strong></p><p>共用体<em>各成员的空间共享</em>，所以不能整体赋值和输出，在<em>初始化也只能初始化一个成员</em></p><p>如果对两个及其以上的成员赋值，那么后一个会<em>覆盖</em>前一个的值，也就是说最后赋值的数据有效</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p><em>枚举类型</em>是用户自定义的一种数据类型。该类型必须为<em>有限的取值范围</em>，可以逐一列举出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">week</span> &#123;</span>Monday, Tuesday, Webnesday, Thursday, Friday, Saturday, Sunday&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>enum：定义枚举类型的关键字</p><p>week：用户给新类型命名的名称</p><p>{. . . . . . }：枚举元素或枚举常量</p><p>枚举元素用大括号括起；枚举元素之间用逗号隔开；以分号结束定义；</p><p>enum 枚举类型名 {枚举常量1, 枚举常量2, .  . . . . , 枚举常量n};</p></blockquote><p>C语言中，系统会为每个枚举元素对应一个<em>默认整数值</em>，通常从 “ 0 ” 开始，并顺次加1。</p><p>如果要改变这种默认值，可以在定义时进行指定。</p><blockquote><p>enum week {Monday=3, Tuesday, Webnesday, Thursday=0, Friday, Saturday, Sunday=7};</p><p>3，4，5，0，1，2，7；</p></blockquote><p>如果只是赋值了一些变量，还有些变量没有赋值，那么没赋值的变量为前一个变量的值加一，</p><p><strong>定义枚举变量</strong></p><p>（一）先定义枚举类型，再定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">week</span> &#123;</span>Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">week</span> <span class="hljs-title">w1</span>;</span><br><br>枚举类型名 变量名;<br></code></pre></td></tr></table></figure><p>（二）定义枚举类型同时定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">week</span> &#123;</span>Monday, Tuesday, Webnesday, Thursday, Friday, Saturday, Sunday&#125;w2, w3;<br><span class="hljs-comment">//变量写在分号之间，变量之间用逗号隔开。</span><br></code></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p><strong>文件的分类</strong></p><p>按内容分：源程序文件、目标文件、数据文件</p><p>按数据组织形式分：文件（字符）文件、二进制文件</p><p><strong>文件类型指针</strong></p><p>一个指针变量指向一个文件，这个指针称为<em>文件指针</em>，文件进行的各种操作都是通过指针来完成。</p><p>定义形式：FILE *指针变量名;</p><p><strong>文件的打开与关闭</strong></p><ol><li><p><em>文件的打开</em>：fopen()函数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *p;<br>p=fopen(文件名, 文件使用方式); <span class="hljs-comment">//返回的结果是文件打开的路径</span><br></code></pre></td></tr></table></figure><p> | 使用方式 | 处理方法 |          含义          | 指定文件不存在 | 指定文件存在 |<br> | :———: | :———: | :——————————: | :——————: | :—————: |<br> |   “r”    |   只读   | 为输入打开一个文本文件 |      出错      |   正常打开   |<br> |   “w”    |   只写   | 为输入打开一个文本文件 |   建立新文件   |     覆盖     |<br> |   “a”    |   追加   | 为输入打开一个文本文件 |   建立新文件   |  打开，追加  |<br> |   “rb”   |   只读   | 为输入打开一个文本文件 |      出错      |   正常打开   |<br> |   “wb”   |   只写   | 为输入打开二进制位文件 |   建立新文件   |     覆盖     |<br> |   “ab”   |   追加   | 为输入打开二进制位文件 |   建立新文件   |  追加，打开  |</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>((fp=fopen(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>))==<span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//当需要打开的文件不存在时</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不能打开该文件。\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><em>文件的关闭</em>（fclose()函数）</p><p> 函数<em>调用形式</em>：fclose(文件指针变量);</p><p> <em>注意</em>：使用函数fopen()和函数fclose()应在程序的开头使用命令：<em>#include <stdio.h></em></p></li></ol><p><strong>读写一个字符</strong></p><ol><li><p>将一个字符输出到文件——函数fputc()</p><p> <em>一般形式</em>：fputc(ch, fp);</p><p> <em>功能</em>：把字符变量ch的值输出到指针变量fp指向的文件</p><p> <em>说明</em>：函数执行成功，其返回为被输出的字符ch，否则返回值为文件结束标志EOF，EOF是一个符号常量，再stdio.h头文件中被定义为-1</p></li><li><p>从文件读入一个字符函数fgetc()</p><p> <em>一般形式</em>：ch=fgetc(fp);</p><p> <em>功能</em>：从指针变量fp指向的文件中读取一个字符赋给字符变量ch。</p><p> <em>说明</em>：函数返回值为读入的字符ch，如果读入的字符是问价结束标志EOF，则返回值为EOF。</p></li></ol><p><strong>读写一个字符串</strong></p><ol><li><p>从文件读入一个字符串函数fgets()</p><p> <em>一般形式</em>：fgets(str,n,fp);</p><p> <em>功能</em>：从指针变量fp指向的文件中读入n-1个字符，送到字符数组str中。</p></li><li><p>向文件输出一个字符串函数fputs()</p><p> <em>一般形式</em>：fputs(str,fp);</p><p> <em>功能</em>：把字符数组str中的字符串输出到指针变量fp指向的文件中，但字符串结束标志’\0’不输出。</p></li></ol><p><strong>格式化输入和输出</strong></p><ol><li><p>按指定格式从文件读入数据函数fscnaf()</p><p> <em>一般形式</em>：fscanf(文件指针,  格式控制字符串,地址项表);</p><p> <em>功能</em>：从文件指针指向的文件中按格式控制字符串指定的格式读取数据存入地址项表中变量的存储单元。</p></li><li><p>按指定格式向文件输出数据函数fprintf()</p><p> <em>一般形式</em>：fprintf(文件指针,格式控制字符串,输出表列);</p><p> <em>功能</em>：把输出表列中变量的值按指定格式输出到问价指针指向的文件中。</p></li></ol><p>feof(*fp)函数：判断是否为文件尾，为文件尾时返回0，否则返回非0；</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/2021/04-224a4cd38f469e.html"/>
    <url>/posts/2021/04-224a4cd38f469e.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
